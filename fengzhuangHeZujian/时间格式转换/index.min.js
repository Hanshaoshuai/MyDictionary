//为Date对象增加时间格式化函数
function formatDate(date, fmt) {
	date = new Date(date);
	var newNum = new Date().getTime(),
		time = date.toLocaleString(),
		S = Math.floor((date.getMilliseconds() / 10)),
		q = date.getMonth();
	var o = {
		"M+": date.getMonth() + 1,
		"d+": date.getDate(),
		"H+": date.getHours() % 12 == 0 ? 12 : date.getHours() % 12,
		"h+": date.getHours(),
		"m+": date.getMinutes(),
		"s+": date.getSeconds(),
		"S": S < 10 ? "0" + S.toString() : S,
		"q+": function() {
			if(q < 3) {
				return '第一季度'
			} else if(q < 6) {
				return '第二季度'
			} else if(q < 9) {
				return '第三季度'
			} else if(q < 12) {
				return '第四季度'
			}
		}
	};
	var week = {
		"0": "日",
		"1": "一",
		"2": "二",
		"3": "三",
		"4": "四",
		"5": "五",
		"6": "六"
	};
	if(/(y+)/.test(fmt)) {
		fmt = fmt.replace(RegExp.$1, (date.getFullYear() + "").substr(4 - RegExp.$1.length))
	}
	if(/(E+)/.test(fmt)) {
		fmt = fmt.replace(RegExp.$1, ((RegExp.$1.length > 1) ? (RegExp.$1.length > 2 ? "星期" : "周") : "") + week[date.getDay() + ""])
	}
	if(/(AM+)/.test(fmt)) {
		var x = date.getHours()
		fmt = fmt.replace(RegExp.$1, time.match('上午') ? time.match('上午') : (x<12 ? '上午 ' : '下午 '));
	}
	for(var k in o) {
		if(new RegExp("(" + k + ")").test(fmt)) {
			fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length)))
		}
	}
	return fmt
}

function numToTime(num) {
	var newNum = new Date().getTime(),
		time = new Date(num).toLocaleString(),
		year, mouth, day, newTime = new Date(newNum).toLocaleString();
	time = time.replace(/\d+[\/\-]/, function(text) {
		year = text.match(/\d+/)[0];
		return ''
	});
	time = time.replace(/\d+[\/\-]/, function(text) {
		mouth = text.match(/\d+/)[0];
		return ''
	});
	time = time.replace(/\d+/, function(text) {
		day = text.match(/\d+/)[0];
		return ''
	});
	num = (newNum - num) / 1000;
	if(num < 60) {
		return '刚刚'
	} else if(num < 3600) {
		return parseInt(num / 60) + '分钟前'
	} else if(num < 86400) {
		return parseInt(num / 3600) + '小时前'
	} else if(year === newTime.match(/\d+/)[0]) {
		return mouth + '月' + day + '日'
	} else {
		return year + '年' + mouth + '月' + day + '日'
	}
}

function numToTime1(num) {
	var newNum = new Date().getTime(),
		time = new Date(num).toLocaleString(),
		year, mouth, day, h, m, newTime = new Date(newNum).toLocaleString();
	time = time.replace(/\d+[\/\-]/, function(text) {
		year = text.match(/\d+/)[0];
		return ''
	});
	time = time.replace(/\d+[\/\-]/, function(text) {
		mouth = text.match(/\d+/)[0];
		return ''
	});
	time = time.replace(/\d+/, function(text) {
		day = text.match(/\d+/)[0];
		return ''
	});
	time = time.replace(/\d+/, function(text) {
		h = text.match(/\d+/)[0];
		return ''
	});
	time = time.replace(/\d+/, function(text) {
		m = text.match(/\d+/)[0];
		return ''
	});
	num = (newNum - num) / 1000;
	if(day == new Date().getDate()) {
		if(/上午/.test(time)) {
			if(h < 10) {
				return '0' + h.toString() + ':' + m
			} else {
				if(h == 12) {
					return '00:' + m
				} else {
					return h + ':' + m
				}
			}
		} else {
			if(h < 12) {
				return(12 + h * 1) + ':' + m
			} else {
				return h + ':' + m
			}
		}
	}
	if(year === newTime.match(/\d+/)[0]) {
		return mouth + '月' + day + '日'
	} else {
		return year + '年' + mouth + '月' + day + '日'
	}
}

function numToTime2(num) {
	var newNum = new Date().getTime();
	num = (num + 10 * 24 * 3600 * 1000 - newNum) / 1000;
	var D = num / 3600 / 24;
	var H = D - Math.floor(D);
	H = H * 24;
	var M = H - Math.floor(H);
	M = M * 60;
	console.log(D);
	console.log(H);
	console.log(M);
	if(D >= 1) {
		return Math.floor(D) + '天' + Math.floor(H) + "小时" + Math.round(M) + "分钟"
	} else if(H >= 1) {
		return Math.floor(H) + "小时" + Math.round(M) + "分钟"
	} else {
		return Math.round(M) + "分钟"
	}
}

function numToTime3(num) {
	var newNum = new Date().getTime();
	num = (num + 10 * 24 * 3600 * 1000 - newNum) / 1000;
	var D = num / 3600 / 24;
	var H = D - Math.floor(D);
	H = H * 24;
	var M = H - Math.floor(H);
	M = M * 60;
	var S = M - Math.floor(M);
	S = S * 60;
	var MS = S - Math.floor(S);
	MS = Math.floor(MS * 100);
	if(D >= 1) {
		H = H < 10 ? "0" + Math.floor(H).toString() : Math.floor(H);
		M = M < 10 ? "0" + Math.floor(M).toString() : Math.floor(M);
		S = S < 10 ? "0" + Math.floor(S).toString() : Math.floor(S);
		MS = MS < 10 ? "0" + MS.toString() : MS;
		return Math.floor(D) + '天' + H + "小时" + M + "分钟" + S + "秒" + MS + "毫秒"
	} else if(H >= 1) {
		H = H < 10 ? "0" + Math.floor(H).toString() : Math.floor(H);
		M = M < 10 ? "0" + Math.floor(M).toString() : Math.floor(M);
		S = S < 10 ? "0" + Math.floor(S).toString() : Math.floor(S);
		MS = MS < 10 ? "0" + MS.toString() : MS;
		return H + "小时" + M + "分钟" + S + "秒" + MS + "毫秒"
	} else if(M >= 1) {
		M = M < 10 ? "0" + Math.floor(M).toString() : Math.floor(M);
		S = S < 10 ? "0" + Math.floor(S).toString() : Math.floor(S);
		MS = MS < 10 ? "0" + MS.toString() : MS;
		return M + "分钟" + S + "秒" + MS + "毫秒"
	} else {
		S = S < 10 ? "0" + Math.floor(S).toString() : Math.floor(S);
		MS = MS < 10 ? "0" + MS.toString() : MS;
		return S + "秒" + MS + "毫秒"
	}
}
module.exports = {
	"formatDate使用": 'formatDate("yyyy-MM-dd EE AM hh:mm:ss S q")参数为字符串间隔符号可自定义，返回为详细时间格式',
	"formatDate": function(fmt) {
		return formatDate(new Date(), fmt)
	},
	"numToTime使用": 'numToTime(num) 参数num为时间戳如1524300940833；过去式记录格式为：刚刚、多少分钟前、多少小时前',
	"numToTime": function(num) {
		return numToTime(num);
	},
	"numToTime1使用": 'numToTime1(num) 参数num为时间戳如1514301940833；过去式记录格式为：几时几分、超过24小时显示几月几日',
	"numToTime1": function(num) {
		return numToTime1(num);
	},
	"numToTime2使用": 'numToTime2(num) 参数num为时间戳如1524303940833；倒计时格式：一次性提示，还剩下 几天几小时几分钟',
	"numToTime2": function(num) {
		return numToTime2(num);
	},
	"numToTime3使用": 'numToTime3(num) 参数num为时间戳如1524303940833；倒计时格式：实时刷新性提示，还剩下 几天几小时几分钟几秒',
	"numToTime3": function(num) {
		return numToTime3(num);
	}
};